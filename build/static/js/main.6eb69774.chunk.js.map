{"version":3,"sources":["components/Welcome.js","components/SignOut.js","components/Nav.js","components/SignIn.js","components/SignUp.js","components/Find_account.js","components/Find_Email_completed.js","components/Find_PW_completed.js","components/Edit.js","components/Remove.js","components/Remove_completed.js","components/Footer.js","routes/MyPage.js","components/ListItem.js","components/List.js","components/NewToDo.js","routes/ToDo.js","components/ListCompleteFiltered.js","routes/Completed.js","components/ListImportantFiltered.js","routes/Important.js","App.js","index.js"],"names":["Welcome","props","userName","SignOut","reLogin","loginStatus","window","location","href","console","log","className","onClick","this","logOut","React","Component","NavLinkStyle","textDecoration","color","Nav","loginUserInfo","resetLogin","isLogin","to","style","SignInModal","hadleInputValue","key","text","setState","target","value","handleSignIn","state","signInfo","email","password","i","errorMessage","user","length","doSignIn","sessionStorage","setItem","handleResponseSuccess","id","src","onSubmit","e","preventDefault","type","onChange","SignUpModal","mobile","errorMessageMobile","errorMessageEmail","notFormedMobileNum","userIdInfo","count","handleClickduplicatedId","userInfo","alert","includes","handleInPutValue","handClickAddNewUserInfo","NewUserInformation","FindAccount","handleInputValue","notFormedMobileNumOnFindEmail","notFormedMobileNumOnFindPw","errorMessagePw","handleFindEmailValue","name","history","push","pathname","handleFindPwValue","userPwInfo","pw","CompletedFindEmail","CompletedFindPw","reducer","action","Edit","makeChange","useReducer","dispatch","useCallback","placeholder","Remove","isModalOpen","closeModal","handleClickRemoveUserInfo","InputPw","signOut","RemoveUserCompleted","closeModla","linkStyle","wordStyle","fontSize","Footer","rel","Date","getFullYear","MyPage","data","adoptModifiedInfo","String","slice","bind","ListItem","todo","onRemove","onToggleOfImportant","onToggleOfComplete","listId","important","content","complete","cn","memo","List","todos","map","NewToDo","onInsert","useState","startDate","err","newTodo","setNewTodo","ToDo","getTodos","el","list","setTodos","setLoading","useEffect","a","axios","post","response","fetchData","nextListId","useRef","current","concat","filter","ListCompleteFiltered","Completed","filtered","ListImportantFiltered","Important","App","handleSignOut","doSignOut","clear","getItem","path","exact","render","SignIn","component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eb69774.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Welcome(props) {\n  // console.log(\"welcome프롭\", props)\n  return (\n    <>\n      <div>{props.userName === null ? 'Geust' : props.userName} 님 </div>\n      <div>환영합니다 :)</div>\n    </>\n  );\n}\n\nexport default Welcome;\n","import { func } from 'prop-types'\nimport React from 'react';\n\nclass SignOut extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log('signout props', props)\n  }\n\n  /*//* 아래 20번줄 주석 설명 참고하기 */\n\n  reLogin = () => {\n    if (this.props.loginStatus === false) {\n      window.location.href = \"/\";   // 자바스크립트 이용한 특정 Url로 접속 (redirect)\n    }\n  }\n  render() {\n    return (\n\n      /* 1. 로그아웃하기 위해 App.js로부터 props로 로그인 된 유저정보를 받아왔고, 이 컴포넌트에서 로그아웃 이벤트를 state 끌어올리기로 App.js로 전달.  \n         2. App.js에서 isLogin 정보를 받아와 false일 경우 \"로그인\" 버튼을, true일 경우 \"로그아웃\"버튼을 렌더하기 \\\n         3. reLogin()의 역할: 만약 홈경로가 아닌 /mypage와 같은 페이지에서 로그아웃을 하게 된다면, 로그아웃이 된 빈페이지만 렌더가 된다. \n            이 때 \"로그인\"으로 변환이 된 버튼을 누르면 로그인 \"/\"로 돌아가 로그인 모달창이 나타나도록 함.\n            (App.js에서 isLogin이 false면 로그인모달이 나타나게끔 path경로 설정해놈)\n         */\n      <div>\n        <button className=\"logOut_logIn_btn\" onClick={this.props.loginStatus === true ? this.props.logOut : this.reLogin}>{this.props.loginStatus === false ? \"로그인\" : \"로그아웃\"}</button>\n      </div>\n    );\n  }\n}\n\nexport default SignOut;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// components\nimport Welcome from \"../components/Welcome\";\nimport SignOut from \"../components/SignOut\";\n\n// CSS\nimport \"./Nav.scss\";\n\nconst NavLinkStyle = {\n  textDecoration: `none`,\n  color: `white`,\n};\n\nclass Nav extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    console.log(\"Nav프롭\", this.props);\n\n    return (\n      <ul className=\"nav\">\n        <div className=\"nav-welcome\">\n          <Welcome userName={this.props.loginUserInfo.userName} />{\" \"}\n          {/* welcome 컴포넌트로 전달 */}\n          <SignOut\n            logOut={this.props.resetLogin}\n            loginStatus={this.props.loginUserInfo.isLogin}\n          />{\" \"}\n          {/* signOut 컴포넌트로 전달 */}\n        </div>\n\n        <li className=\"nav-todo\">\n          <Link to={\"/\"} style={NavLinkStyle}>\n            홈\n          </Link>\n        </li>\n        <li className=\"nav-mypage\">\n          <Link to={\"/mypage\"} style={NavLinkStyle}>\n            마이페이지\n          </Link>\n        </li>\n        <li className=\"nav-completed\">\n          <Link to={\"/completed\"} style={NavLinkStyle}>\n            완료일정\n          </Link>\n        </li>\n        <li className=\"nav-important\">\n          <Link to={\"/important\"} style={NavLinkStyle}>\n            중요일정\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport user from \"../test_data_user.json\";\nimport axios from \"axios\";\n\nclass SignInModal extends React.Component {\n  constructor(props) {\n    console.log(props);\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      errorMessage: \"\",\n    };\n    console.log(\"asdfasdfas\", this.props);\n\n\n    /* ----------------소셜 로그인------------------- */\n\n\n\n    /* ----------------로그인----------------------- */\n  }\n  // e-mail, pw 입력 기능\n  hadleInputValue = (key) => (text) => {\n    console.log(\"잘 작성이 되나?\");\n    // console.log('key', key)\n    // console.log('text', text)\n    this.setState({\n      [key]: text.target.value,\n    });\n  };\n\n  handleSignIn = () => {\n    console.log(\"사인인state\", this.state);\n    const signInfo = {\n      email: this.state.email,\n      password: this.state.password,\n      errorMessage: this.state.errorMessage,\n    };\n\n    for (let i = 0; i < user.length; i++) {\n      if (!signInfo.email.length || !signInfo.password.length) {\n        this.setState({\n          errorMessage: \"e-mail과 PW를 입력하세요.\",\n        });\n      }\n      //* 입력이 된 값으로 서버에 로그인 요청을 하고, props로 전달된 callback을 호출\n      // else {  //! 추후 알맞게 수정하기, 우선은 fackdata로\n      //     axios.post('http://localhost:8000/', signInfo)\n      //         .then(res => {\n      //             this.props.handleResponseSuccess()\n      //         })\n      //         .catch(error => {\n      //             this.setState({\n      //                 errorMessage: 'e-mail 혹은 PW가 일치하지 않습니다.'\n      //             })\n      //         })\n      // }\n      else {\n        if (\n          user[i].email === this.state.email &&\n          user[i].password === this.state.password\n        ) {\n          // this.doSignIn();\n          this.doSignIn();\n        } else\n          this.setState({\n            errorMessage: \"e-mail 혹은 PW가 일치하지 않습니다.\",\n          });\n      }\n      // console.log(user)\n    }\n  };\n\n  //! session storage에 저장하여 로그인을 유지시킨다.\n  doSignIn = () => {\n    const { email } = this.state;\n    window.sessionStorage.setItem(\"email\", email);\n    this.props.handleResponseSuccess();\n  };\n\n  render() {\n    console.log(\"사인 state\", this.state);\n    return (\n      <div className=\"modal hidden\">\n        <div className=\"modal_overlay\"></div>\n        <div className=\"modal_content\">\n          <h1>너의 시간을 겟~⭐️</h1>\n          <div className=\"container\">\n            <div className=\"signUp_div\">\n              <NavLink to=\"/signup\" className=\"signUp_link\">\n                아직 회원이 아니신가요?\n              </NavLink>\n              {/* <div onClick={this.handleClick} onChange={this.moveSignUp} id=\"to_signUp\">아직 회원이 아니신가요?</div> */}\n            </div>\n\n            {/* <img id='sign_in_img' src='https://gdimg.gmarket.co.kr/1496139073/still/600?ver=1537817021'></img> */}\n            <img\n              id=\"sign_in_img\"\n              src=\"https://t1.daumcdn.net/cfile/tistory/992C413B5D2ACF7C1D\"\n            ></img>\n\n            {/*-------------- e-mail pw 입력칸 ----------------- */}\n            <form onSubmit={(e) => e.preventDefault()}>\n              <div className=\"container1\">\n                <div className=\"email_div\">\n                  <span className=\"email_span\">e-mail</span>\n                  <input\n                    type=\"email\"\n                    onChange={this.hadleInputValue(\"email\")}\n                  ></input>\n                </div>\n                <div className=\"PW_div\">\n                  <span>PW</span>\n                  <input\n                    type=\"password\"\n                    onChange={this.hadleInputValue(\"password\")}\n                  ></input>\n                </div>\n              </div>\n\n              <div className=\"findAccount_span\">\n                <span>\n                  <NavLink to=\"/findaccount\" className=\"findAccount_link\">\n                    e-mail | PW 찾기\n                  </NavLink>\n                </span>\n              </div>\n\n              <div>\n                {/* <NavLink to=\"/todo\"> */}\n                <button\n                  className=\"loginButton\"\n                  type=\"submit\"\n                  onClick={this.handleSignIn}\n                >\n                  로그인\n                </button>\n                {/* </NavLink> */}\n                <div>\n                  <button className=\"loginButton\"\n                    type=\"submit\"\n\n                  >Github 로그인</button>\n                </div>\n                <div className=\"alert-box\">{this.state.errorMessage}</div>\n              </div>\n            </form>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default SignInModal;\n","import React from 'react'\nimport axios from 'axios'\nimport { NavLink } from 'react-router-dom'\n\n\n\n//fakedate\nimport user from \"../test_data_user.json\";\n\nclass SignUpModal extends React.Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    userName: \"\",\n    mobile: \"\",\n    errorMessage: \"\",\n    errorMessageMobile: \"\",\n    errorMessageEmail: \"\",\n  };\n\n  //* 연락처 형식 헬퍼 함수: '-' 삽입 필수\n  notFormedMobileNum = () => {\n    const { mobile } = this.state;\n    const userIdInfo = {\n      mobile: mobile,\n    };\n    let count = 0;\n    for (let i = 0; i < userIdInfo.mobile.length; i++) {\n      if (userIdInfo.mobile[i] === \"-\") {\n        count++;\n        if (count === 2) {\n          console.log(\"c\", count);\n          return;\n        }\n      }\n    }\n    this.setState({\n      errorMessageMobile: \"'-'를 입력해주세요.\"\n    });\n  };\n\n\n  // 중복확인 --> 백앤드 팀원들에게 구현했는지 물어보기 우선, 기능플로우 부터 확인.\n  //fakedata 이용\n  handleClickduplicatedId = () => {\n    const { email } = this.state;\n    const userInfo = {\n      email: email\n    }\n    for (let i = 0; i < user.length; i++) {\n      if (!userInfo.email.length) {\n        return alert(\"항목을 입력해주세요.\");\n\n      }\n      else if (userInfo.email === user[i].email) {\n        return alert(\"이미 존재하는 e-mail입니다.\");\n      }\n      else if (!userInfo.email.includes('@') || !userInfo.email.includes('.')) {\n        return alert(\"이메일 형식을 지켜주세요. ex) @, .com 등\");\n      }\n    }\n    return alert(\"사용이 가능한 e-mail입니다.\");\n  }\n\n\n  handleInPutValue = (key) => (text) => {\n    console.log('잘 입력되나?')\n    // console.log('k', key)\n    // console.log('t', text)\n    this.setState({\n      [key]: text.target.value\n    });\n  }\n\n  // 회원가입한 새로운 유저 정보를 데이터 베이스에 저장한다. \n  // 서버에 회원가입을 요청 후 로그인 페이지로 이동한다.\n  handClickAddNewUserInfo = () => {\n    const NewUserInformation = {\n      email: this.state.email,\n      password: this.state.password,\n      userName: this.state.userName,\n      mobile: this.state.mobile,\n    };\n\n    if (\n      !NewUserInformation.email.length ||\n      !NewUserInformation.password.length ||\n      !NewUserInformation.userName.length ||\n      !NewUserInformation.mobile.length\n    ) {\n      this.setState({\n        errorMessage: \"모든 항목은 필수입니다.\",\n      });\n    } else if (\n      NewUserInformation.email.length &&\n      NewUserInformation.password.length &&\n      NewUserInformation.userName.length &&\n      NewUserInformation.mobile.length\n    ) {\n      this.notFormedMobileNum();\n    }\n\n    //! 해당 신규 유저의 정보를 서버로 post 요청을 한 후(DB추가 등),  res로 응답코드를 받든 뭐든 받으면 로그인 페이지로 리다이렉트\n    //* 서버 통신시 아래 코드를 테스트해보고 사용하기\n    /*     else {\n      axios.post('http', NewUserInformation)\n      .then(response => {\n        this.props.history.push(\"/\")\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: \"회원가입에 실패했습니다. 다시 시도해주세요.\"\n        })\n      })\n    } */\n  };\n\n  render() {\n    // console.log('user', user)\n    // console.log(this.props.history)\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_overlay\"></div>\n        <div className=\"modal_content\">\n          <h1>회원 가입</h1>\n\n          <div className=\"container\">\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n              }}\n            >\n              <div className=\"container1\">\n                <div className=\"inputInfo\">\n                  <span className=\"email_span\">e-mail</span>\n                  <input\n                    type=\"email\"\n                    onChange={this.handleInPutValue(\"email\")}\n                  ></input>\n                  <button\n                    className=\"check\"\n                    onClick={this.handleClickduplicatedId}\n                  >\n                    중복 확인\n                  </button>\n                  <div>{this.state.errorMessageEmail}</div>\n                </div>\n\n                <div>\n                  <span>PW</span>\n                  <input\n                    type=\"password\"\n                    onChange={this.handleInPutValue(\"password\")}\n                  ></input>\n                </div>\n\n                <div>\n                  <span>고객명</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInPutValue(\"userName\")}\n                  ></input>\n                </div>\n\n                <div>\n                  <span>연락처</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInPutValue(\"mobile\")}\n                  ></input>\n                  <div>{this.state.errorMessageMobile}</div>\n                </div>\n              </div>\n              <div>\n                <div>{this.state.errorMessage}</div>\n\n                {/* <NavLink to='' className='signUp_link'> */}\n                <button\n                  className=\"signUp_btn\"\n                  onClick={this.handClickAddNewUserInfo}\n                >\n                  회원 가입\n                </button>\n                {/* </NavLink> */}\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SignUpModal;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\n//Fake Data\nimport user from \"../test_data_user.json\";\n\nclass FindAccount extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      userName: \"\",\n      mobile: \"\",\n      errorMessageEmail: \"\",\n      errorMessagePw: \"\",\n    };\n  }\n\n  handleInputValue = (key) => (text) => {\n    console.log(\"질입력되나?\");\n    // console.log('k', key)\n    // console.log('t', text)\n    this.setState({\n      [key]: text.target.value,\n    });\n  };\n\n  //* 연락처 형식 헬퍼 함수: '-' 삽입 필수\n  notFormedMobileNumOnFindEmail = () => {\n    const { mobile } = this.state;\n    const userIdInfo = {\n      mobile: mobile,\n    };\n    let count = 0;\n    for (let i = 0; i < userIdInfo.mobile.length; i++) {\n      if (userIdInfo.mobile[i] === \"-\") {\n        count++;\n        if (count === 2) {\n          console.log(\"c\", count);\n          return;\n        }\n      }\n    }\n    this.setState({\n      errorMessageEmail: \"'-'를 입력해주세요.\",\n    });\n  };\n\n  notFormedMobileNumOnFindPw = () => {\n    const { mobile } = this.state;\n    const userIdInfo = {\n      mobile: mobile,\n    };\n    let count = 0;\n    for (let i = 0; i < userIdInfo.mobile.length; i++) {\n      if (userIdInfo.mobile[i] === \"-\") {\n        count++;\n        if (count === 2) {\n          console.log(\"c\", count);\n          return;\n        }\n      }\n    }\n    this.setState({\n      errorMessagePw: \"'-'를 입력해주세요.\",\n    });\n  };\n  //*----------------------------------\n\n  handleFindEmailValue = () => {\n    const { email, userName, mobile } = this.state;\n    const userIdInfo = {\n      email: email,\n      userName: userName,\n      mobile: mobile\n    };\n    for (let i = 0; i < user.length; i++) {\n      if (\n        userIdInfo.userName === user[i].name &&\n        userIdInfo.mobile === user[i].mobile\n      ) {\n        // console.log(this.props)\n        this.props.history.push({\n          pathname: \"/useremail\",\n          state: { userName: user[i].name, email: user[i].email },\n        }); // CompletedFindEmail에 props로 입력 값 넘겨주기\n      } else if (!userIdInfo.userName.length || !userIdInfo.mobile.length) {\n        this.setState({\n          errorMessageEmail: \"모든 항목을 입력하세요.\",\n        });\n      } else if (\n        userIdInfo.userName !== user[i].name ||\n        userIdInfo.mobile !== user[i].mobile\n      ) {\n        this.setState({\n          errorMessageEmail: \"일치하는 e-mail이 없습니다.\",\n        });\n        this.notFormedMobileNumOnFindEmail();\n      }\n    }\n  };\n\n  handleFindPwValue = () => {\n    const { email, userName, mobile } = this.state;\n    const userPwInfo = {\n      email: email,\n      userName: userName,\n      mobile: mobile\n    };\n    for (let i = 0; i < user.length; i++) {\n      if (\n        userPwInfo.email === user[i].email &&\n        userPwInfo.userName === user[i].name &&\n        userPwInfo.mobile === user[i].mobile\n      ) {\n        this.props.history.push({\n          pathname: \"userpw\",\n          state: { pw: user[i].password },\n        });\n      } else if (\n        !userPwInfo.email.length ||\n        !userPwInfo.userName.length ||\n        !userPwInfo.mobile.length\n      ) {\n        this.setState({\n          errorMessagePw: \"모든 항목을 입력하세요.\",\n        });\n      } else if (\n        userPwInfo.email !== user[i].email ||\n        userPwInfo.userName !== user[i].name ||\n        userPwInfo.mobile !== user[i].mobile\n      ) {\n        this.setState({\n          errorMessagePw: \"비밀번호를 찾지 못하였습니다.\",\n        });\n        this.notFormedMobileNumOnFindPw(); // 연락처 형식 맞추는게 우선순위이니.\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_overlay\"></div>\n        <div className=\"modal_content\">\n          {/* -----------------이메일 찾기------------------ */}\n\n          <h2>e-mail 찾기</h2>\n\n          <div className=\"container\">\n            <form onSubmit={(e) => e.preventDefault()}>\n              <div className=\"find_e-mail_box\">\n                <div>\n                  <span>고객명</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInputValue(\"userName\")}\n                  ></input>\n                </div>\n\n                <div>\n                  <span>연락처</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInputValue(\"mobile\")}\n                  ></input>\n                </div>\n              </div>\n\n              <div>{this.state.errorMessageEmail}</div>\n              {/* <NavLink to='/useremail'> */}\n              <button className=\"findBtn\" onClick={this.handleFindEmailValue}>\n                e-mail 찾기\n              </button>\n              {/* </NavLink> */}\n            </form>\n\n            <div className=\"line\"> </div>\n\n            {/* -----------------패스워드 찾기------------------ */}\n\n            <h2>PW 찾기</h2>\n            {/* 바로 아랫 줄 코드. 이메일 형식이 안맞으면 말풍선으로 에러 메세지 띄움 */}\n            <form onSubmit={(e) => e.preventDefault()}>\n              <div className=\"find_pw_box\">\n                <div className=\"inputInfo\">\n                  <span className=\"email_span\">e-mail</span>\n                  <input\n                    type=\"email\"\n                    onChange={this.handleInputValue(\"email\")}\n                  ></input>\n                </div>\n                <div>\n                  <span>고객명</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInputValue(\"userName\")}\n                  ></input>\n                </div>\n\n                <div>\n                  <span>연락처</span>\n                  <input\n                    type=\"text\"\n                    onChange={this.handleInputValue(\"mobile\")}\n                  ></input>\n                </div>\n              </div>\n              <div>{this.state.errorMessagePw}</div>\n\n              {/* <NavLink to='/userpw'> */}\n              <button className=\"findBtn\" onClick={this.handleFindPwValue}>\n                PW 찾기\n              </button>\n              {/* </NavLink> */}\n            </form>\n\n\n            <NavLink to='' className='signUp_link'>\n              <button className='signUp_btn'>로그인 페이지로 돌아가기</button>\n            </NavLink>\n\n            <NavLink to=\"/signup\" className=\"signUp_link\">\n              <button className=\"signUp_btn\">회원 가입</button>\n            </NavLink>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FindAccount;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass CompletedFindEmail extends React.Component {\n  render() {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_overlay\"></div>\n        <div className=\"modal_content\">\n          <h2>e-mail</h2>\n\n          <div className=\"container\">\n            <div className=\"find_e-mail_box\">\n              <div className=\"information\">\n                {`귀하의 e-mail은 성유리gmail.com입니다.`}{\" \"}\n                {/* 재성님께서 멘트 통째로 보내주기로 함. */}\n              </div>\n            </div>\n\n            <NavLink to=\"/findaccount\">\n              <button className=\"findBtn\">PW 찾기</button>\n            </NavLink>\n\n            <NavLink to=\"\" className=\"signUp_link\">\n              <button className=\"signUp_btn\">로그인 페이지로 돌아가기</button>\n            </NavLink>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CompletedFindEmail;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass CompletedFindPw extends React.Component {\n  render() {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal_overlay\"></div>\n        <div className=\"modal_content\">\n          <h2>e-mail</h2>\n\n          <div className=\"container\">\n            <h2>PW</h2>\n            <div className=\"find_pw_box\">\n              <div className=\"information\">\n                {`귀하의 PW은 ${1234}입니다.`}{\" \"}\n                {/* 재성님께서 멘트 통째로 보내주기로 함. */}\n              </div>\n            </div>\n\n            <NavLink to=\"\" className=\"signUp_link\">\n              <button className=\"signUp_btn\">로그인 페이지로 돌아가기</button>\n            </NavLink>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CompletedFindPw;\n","import React, { useCallback, useReducer } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Edit.css\";\n\n/*****************************************************************\n                            리액트 훅 명세표\n\n(1) useReducer\n - Input 개체가 다수일 때, 이것들에 의한 state 변화를 한번에 관리하기 위함\n - 클래스 컴포넌트에서 e.target.value들에 대한 setState를 한번에 한 것과 동일\n - \n\n(2) useCallback\n - ToDo.js 컴포넌트의 주석 참조 부탁드립니다.\n******************************************************************/\n\n// reducer hook 액션 정의\nfunction reducer(state, action) {\n  return {\n    ...state,\n    [action.name]: action.value,\n  };\n}\n\nconst Edit = ({ makeChange }) => {\n  // reducer hook으로 한꺼번에 state 관리할 대상 정의\n  const [state, dispatch] = useReducer(reducer, {\n    email: \"\",\n    password: \"\",\n    userName: \"\",\n    mobile: \"\",\n  });\n\n  const { email, password, userName, mobile } = state;\n\n  // reducer hook 구동 대상(\"액션값\")은 \"이벤트 객체(e.target 값)\"라고 설정\n  const onChange = (e) => {\n    dispatch(e.target);\n  };\n\n  // reducer hook 구동 결과(state)를 부모(MyPage.js) 컴포넌트로 끌어올리기\n  const onClick = useCallback(() => {\n    console.log(`제출!! =======>\n    최종제출 이메일: ${state.email}\n    최종제출 비밀번호: ${state.password}\n    최종제출 이름: ${state.userName}\n    최종제출 연락처: ${state.mobile}\n    `);\n\n    makeChange(state);\n  }, [makeChange, state]);\n\n  return (\n    <>\n      <section>\n        <div className=\"myinfo-title\">회원정보</div>\n        <hr />\n        <div>\n          <div>\n            <div className=\"description\">e-mail</div>\n            <input\n              type=\"text\"\n              name=\"email\"\n              value={email}\n              placeholder=\"변경할 이메일을 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n          <div>\n            <div className=\"description\">PW</div>\n            <input\n              type=\"text\"\n              name=\"password\"\n              value={password}\n              placeholder=\"변경할 비밀번호를 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n          <div>\n            <div className=\"description\">고객명</div>\n            <input\n              type=\"text\"\n              name=\"userName\"\n              value={userName}\n              placeholder=\"변경할 고객명을 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n          <div>\n            <div className=\"description\">연락처</div>\n            <input\n              type=\"text\"\n              name=\"mobile\"\n              value={mobile}\n              placeholder=\"변경할 연락처를 입력하세요\"\n              onChange={onChange}\n            ></input>\n          </div>\n        </div>\n      </section>\n      <div>\n        <button onClick={onClick}>수정</button>\n      </div>\n    </>\n  );\n};\n\nexport default Edit;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { NavLink } from \"react-router-dom\";\n\n//fakedate\nimport user from \"../test_data_user.json\";\n\nclass Remove extends React.Component {\n\n  state = {\n    isModalOpen: true,\n    password: \"\",\n    errorMessage: \"\",\n  };\n\n\n\n  /*  모달 닫기 : isModalOpen이 true면 모달창이 떠있도록 셋팅 후 삼항연산자로 아래 렌더부분을 모두 감싸고, \n      아래 closemodal이벤트로 isModaalOpen의 상태를 false로 변경시켜주어 모달을 끄게 하자. \n      모달을 끄게되면 \"/remove\"에서 -> \"/mypage\" 로 리다이렉트 시켜주자.\n      */\n  closeModal = () => {\n    this.setState({\n      isModalOpen: false\n    });\n    this.props.history.push(\"/mypage\")\n\n  };\n\n  handleInPutValue = (key) => (text) => {\n    console.log(\"잘 입력되나?\");\n    // console.log('k', key)\n    // console.log('t', text)\n    this.setState({\n      [key]: text.target.value,\n    });\n  };\n\n\n  // 유저 정보를 삭제하는 기능 이벤트\n  handleClickRemoveUserInfo = () => {\n    const InputPw = {\n      password: this.state.password\n    };\n\n    if (!InputPw.password.length) {\n      this.setState({\n        errorMessage: \"비밀번호를 입력해주세요.\"\n      });\n    }\n    else if (InputPw.password !== user[0].password) {\n      this.setState({\n        errorMessage: \"비밀번호가 일치하지 않습니다.\"\n      })\n    }\n    // 비밀번호가 일치하면 로그아웃 시키고 --> 회원탈퇴완료 컴포넌터모달 보여주기 \n    else if (InputPw.password === user[0].password) {\n      this.props.history.location.signOut()  // App.js -> myPage 경로로 전달된 signOut (session storage에 저장된 유저정보 삭제)\n      this.props.history.push({\n        pathname: \"/remove_user_completed\"\n      })\n    }\n  }\n\n  //   //! 해당 신규 유저의 정보를 서버로 post 요청을 한 후(DB추가 등),  res로 응답코드를 받든 뭐든 받으면 로그인 페이지로 리다이렉트\n  //   //* 서버 통신시 아래 코드를 테스트해보고 사용하기\n  //   /*     else {\n  //         axios.post('http', NewUserInformation)\n  //         .then(response => {\n  //           this.props.history.push(\"/\")\n  //         })\n  //         .catch(error => {\n  //           this.setState({\n  //             errorMessage: \"회원가입에 실패했습니다. 다시 시도해주세요.\"\n  //           })\n  //         })\n  //       } */\n  // };\n\n\n  render() {\n    // console.log('user', user)\n    // console.log('사인아웃 props', this.props)\n    // console.log(\"signout\", this.props.history)\n    return (\n      <>\n        {this.state.isModalOpen === true ?\n\n          <div className=\"modal\">\n            <div className=\"modal_overlay\" onClick={this.closeModal} ></div>\n            <div className=\"modal_content\">\n              <h1>진짜 탈퇴하게유...?</h1>\n\n              <div className=\"container\">\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                  }}\n                >\n                  <div className=\"container1\">\n                    <div>비밀번호를 입력하세요.</div>\n                    <div>\n                      <span>PW</span>\n                      <input\n                        type=\"password\"\n                        onChange={this.handleInPutValue(\"password\")}\n                      ></input>\n                    </div>\n\n                  </div>\n                  <div>\n                    <div>{this.state.errorMessage}</div>\n\n                    <button\n                      className=\"signUp_btn\"\n                      onClick={this.handleClickRemoveUserInfo}\n                    >\n                      계정 삭제\n                </button>\n\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n          : null}\n      </>\n    );\n  }\n}\n\nexport default Remove;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\"\n\n\nclass RemoveUserCompleted extends React.Component {\n\n  state = {\n    isModalOpen: true\n  }\n\n  closeModla = () => {\n    this.setState({\n      isModalOpen: false\n    });\n    this.props.history.push(\"/\")\n  };\n\n  render() {\n    return (\n      <>\n        { this.state.isModalOpen === true ?\n          <div className=\"modal\">\n            <div className=\"modal_overlay\" onClick={this.closeModla}></div>\n            <div className=\"modal_content\">\n              <h1>가 그냥...</h1>\n\n              <div className=\"container\">\n\n                <div className=\"container1\">\n\n                  <div>\n                    회원 탈퇴가 완료되었습니다.\n                </div>\n\n                </div>\n                <div>\n                  <NavLink to=\"/\" className='signUp_link'>\n                    <button\n                      className=\"signUp_btn\"\n                    >\n                      로그인 페이지\n                </button>\n                  </NavLink>\n                </div>\n\n              </div>\n            </div>\n          </div>\n          : null}\n      </>\n    );\n  }\n}\n\nexport default RemoveUserCompleted;\n","import React from \"react\";\n\nconst linkStyle = {\n  color: `white`,\n  textDecoration: `none`,\n};\n\nconst wordStyle = {\n  color: `hotpink`,\n  fontSize: `large`,\n  textDecoration: `none`,\n};\n\nfunction Footer() {\n  return (\n    <div style={wordStyle}>\n      Built with {` `}\n      <a\n        style={linkStyle}\n        href=\"https://www.codestates.com/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        codestates\n      </a>\n      , {` `} Posted by {` `} Fin.K.L © {new Date().getFullYear()}\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\n\n// components\nimport Remove from \"../components/Remove\";\nimport Edit from \"../components/Edit\";\nimport \"./MyPage.css\";\n\nclass MyPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: this.props.email,\n      password: this.props.password,\n      userName: this.props.userName,\n      mobile: this.props.mobile,\n    };\n    console.log(`로그인 유저정보\n  * 이름: ${this.state.userName}   * 이메일: ${this.state.email}    * 비밀번호: ${this.state.password}   * 연락처: ${this.state.mobile}\n  `);\n  }\n\n  makeChange(data) {\n    if (data.email !== \"\") this.setState({ email: data.email });\n    if (data.password !== \"\") this.setState({ password: data.password });\n    if (data.userName !== \"\") this.setState({ userName: data.userName });\n    if (data.mobile !== \"\") this.setState({ mobile: data.mobile });\n    this.props.adoptModifiedInfo(data);\n  }\n\n  /* 1. history.push.location을 이용해 props를 회원탈퇴 컴포넌트로 이동 \n     2. pw도 같이 담아 보내기 \n  */\n  // tossUserPwToSignOut = ({ history }) => {\n\n  // }\n\n\n  componentDidMount() {\n    this.makeChange;\n  }\n\n  render() {\n    console.log('마이페이지 props', this.props)\n    const { email, password, userName, mobile } = this.state;\n    return (\n      <>\n        <section>\n          <div className=\"myinfo-title\">&#129296; 회원정보</div>\n          <div>\n            <div>\n              <div className=\"description\">e-mail</div>\n              <div className=\"print\">{email}</div>\n            </div>\n            <div>\n              <div className=\"description\">PW</div>\n              <div className=\"print\">\n                {String(password).slice(0, 1) + \"******\"}\n              </div>\n            </div>\n            <div>\n              <div className=\"description\">고객명</div>\n              <div className=\"print\">{userName}</div>\n            </div>\n            <div>\n              <div className=\"description\">연락처</div>\n              <div className=\"print\">{mobile}</div>\n            </div>\n          </div>\n          <div className=\"myinfobox\">\n            <div>\n              <button className=\"remove-button\">\n\n                {/* props내리기 --> 아래와 같이 작성하면 props.location 혹은 props.history.location에 아래 정보가 담겨 전달\n                    전달받은 Remove.js는 this.props.location 혹은 this.props.history.location에 담긴 pw를 사용할 수 있음\n                */}\n                <Link to={{\n                  pathname: \"/remove\",\n                  state: {\n                    password: this.props.password\n                  },\n                  signOut: this.props.signOut   // 메소드화가 되어 전달되어질 것. ex) signOut();\n                }}\n\n                // to={\"/remove\"}\n                // style={{ textDecoration: \"none\", color: \"white\" }}\n                // email={email}\n                // password={password}\n                // userName={userName}\n                // mobile={mobile}\n                >\n                  회원탈퇴\n                </Link>\n              </button>\n            </div>\n          </div>\n        </section>\n        <section>\n          <Edit\n            to={\"/edit\"}\n            style={{ textDecoration: \"none\", color: \"black\" }}\n            makeChange={this.makeChange.bind(this)}\n          />\n        </section>\n      </>\n    );\n  }\n}\nexport default MyPage;","import React from \"react\";\n// 리액트 기본 아이콘 로드\n// https://react-icons.github.io/react-icons/icons?name=md\nimport {\n  MdStar,\n  MdStarBorder,\n  MdCheckBoxOutlineBlank,\n  MdCheckBox,\n  MdRemoveCircleOutline,\n} from \"react-icons/md\";\n// node-sass 모듈의 조건부 CSS 적용 및 렌더링 기능 추가\nimport cn from \"classnames\";\nimport \"./ListItem.scss\";\nconst ListItem = ({\n  todo,\n  onRemove,\n  onToggleOfImportant,\n  onToggleOfComplete,\n}) => {\n  const { listId, important, content, complete } = todo;\n  return (\n    <div className=\"list-item\">\n      {/* 중요버튼 */}\n      <div\n        className={cn(\"important-check\", { important })}\n        onClick={() => onToggleOfImportant(listId)}\n      >\n        {important ? <MdStar /> : <MdStarBorder />}\n      </div>\n      {/* 완료버튼 */}\n      <div\n        className={cn(\"complete-check\", { complete })}\n        onClick={() => onToggleOfComplete(listId)}\n      >\n        <div className=\"content\">{content}</div>\n        {complete ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n      </div>\n      {/* 삭제버튼 */}\n      <div className=\"remove\" onClick={() => onRemove(listId)}>\n        <MdRemoveCircleOutline />\n      </div>\n    </div>\n  );\n};\n// 컴포넌트의 props가 바뀌지 않았다면 re-rendering 방지(= shouldComponentUpdate와 동일)\nexport default React.memo(ListItem);","import React from \"react\";\nimport ListItem from \"./ListItem\";\nimport \"./List.scss\";\n\nconst List = ({ todos, onRemove, onToggleOfImportant, onToggleOfComplete }) => {\n  return (\n    <div className=\"todolist\">\n      {todos.map((todo) => (\n        <ListItem\n          key={todo.listId}\n          todo={todo}\n          onRemove={onRemove}\n          onToggleOfImportant={onToggleOfImportant}\n          onToggleOfComplete={onToggleOfComplete}\n        />\n      ))}\n    </div>\n  );\n};\n// 컴포넌트의 props가 바뀌지 않았다면 re-rendering 방지(= shouldComponentUpdate와 동일)\nexport default React.memo(List);","import React, { useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { MdAdd } from \"react-icons/md\";\n\nimport \"./NewToDo.scss\";\n\nconst NewToDo = ({ onInsert }) => {\n  // 0. useState를 통한 새 일정({content, startDate}) 관리\n  const [newTodo, setNewTodo] = useState({\n    content: \"\",\n    startDate: \"\",\n    err: \"\",\n  });\n\n  // 1. 입력받은 내용을 새 일정(content)에 반영\n  const onChange = (e) => {\n    setNewTodo({ ...newTodo, [e.target.name]: e.target.value });\n  };\n\n  // 2. 버튼 메소드(엔터키 허용)\n  const onSubmit = useCallback(\n    (e) => {\n      if (newTodo.content.length === 0 || newTodo.startDate.length === 0) {\n        setNewTodo({ err: \"뭐라도 쓰십쇼\" });\n      } else {\n        // ToDo 컴포넌트에 입력내용 반영\n        onInsert(newTodo);\n\n        // 입력폼 초기화\n        setNewTodo({\n          content: \"\",\n          startDate: \"\",\n        });\n        e.preventDefault(); // submit 이벤트로 인한 새로고침 방지\n\n        console.log(`\n      ** 새 일정: ${newTodo.content}\n      ** 시간: ${newTodo.startDate}\n      `);\n      }\n    },\n    [onInsert, newTodo]\n  );\n\n  // 3. 컴포넌트 렌더링\n  return (\n    <>\n      <form className=\"new-todo\" onSubmit={onSubmit}>\n        <input\n          className=\"startDate\"\n          placeholder=\"YYYY-MM-DD\"\n          // onChange 이벤트 입력을 위한 {name: value} 지정\n          name=\"startDate\"\n          value={newTodo.startDate}\n          onChange={onChange}\n          type=\"date\"\n        />\n        <input\n          className=\"content\"\n          placeholder=\"할 일을 입력하시오\"\n          // onChange 이벤트 입력을 위한 {name: value} 지정\n          name=\"content\"\n          value={newTodo.content}\n          onChange={onChange}\n        />\n        <button type=\"submit\">\n          <MdAdd />\n        </button>\n      </form>\n      <div>{newTodo.err !== \"\" ? newTodo.err : null}</div>\n    </>\n  );\n};\n\nexport default NewToDo;\n","import React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// components\nimport List from \"../components/List\";\nimport NewToDo from \"../components/NewToDo\";\nimport \"./ToDo.css\";\n\n// test data\nimport user from \"../test_data_user.json\";\n\n/*****************************************************************\n                            리액트 훅 명세표\n(1) useState\n - 일정들을 \"todos\"로 정의(class 컴포넌트의 this.state에 대응됨)\n - todos는 [ {todo1}, {todo2}, {todo3}, ... ] 의 모습임\n - 즉, todos에는 이미 각 todo들의\n   { listId, content, startDate, important, complete }\n   이 담겨있음\n(2) useCallback\n - 일정입력 이벤트에 쓰일 \"onChange 메소드\"를 정의하여 \"재사용\"할 수 있게 함\n - 이때 \"재사용\"이란 의미는 render 여부와 관계없이 컴포넌트에 유지함을 의미\n - 일반적으로 useCallback로 감싼 메소드는 컴포넌트의 render 대상에서 제외되므로\n   이는 컴포넌트의 성능 향상에 도움됨\n(3) useRef\n - \"listId\"와 같이 화면에 보여줄 필요도 없고 render로 관리할 필요도 없는 경우,\n   즉, 다른 컴포넌트에서 참조(reference) 목적으로만 필요한 경우 사용\n******************************************************************/\n\nconst ToDo = ({ email, getTodos }) => {\n  // 0. useState를 통한 일정들(todos) 관리\n  let todo = {};\n  for (let el of user) {\n    if (el.email === email) {\n      todo = el.list; // 초기상태로 보여줄 일정(테스트 JSON 파일의 첫번째 유저의 일정목록)\n    }\n  }\n  const [todos, setTodos] = useState(todo); // todo state 관리\n  const [isLoading, setLoading] = useState(false); // loading state 관리\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true); // loading 되었다고 알림\n      try {\n        const response = await axios.post(\"http://localhost:8000/main\");\n        setTodos(response.data.list);\n        setLoading(false); // 새로운 state로 render 될 때까지 loading 대기상태로 회귀\n        console.log(\"읽기 완료\");\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // 2. listId를 메소드와 자식 컴포넌트들에 고유변수로 사용할 것임을 선언\n  const nextListId = useRef(7);\n\n  // 3. 새 일정 입력 메소드\n  const onInsert = useCallback(\n    (newTodo) => {\n      const todo = {\n        listId: nextListId.current,\n        content: newTodo.content,\n        startDate: newTodo.startDate,\n        complete: false,\n        important: false,\n      };\n      // 서버에 POST\n      axios.post(\"http://localhost:8000/mypage\", {\n        listId: todo.listId,\n        content: todo.content,\n        startDate: todo.startDate,\n        complete: todo.complete,\n        important: todo.important,\n      });\n      // 컴포넌트 내 일정 목록 최신화(re-rendering)\n      setTodos((todos) => todos.concat(todo));\n      nextListId.current += 1;\n    },\n    [todos]\n  );\n\n  // 4. 삭제 클릭 메소드\n  const onRemove = useCallback(\n    (listId) => {\n      setTodos((todos) => todos.filter((todo) => todo.listId !== listId));\n    },\n    [todos]\n  );\n\n  // 5. 중요 클릭 메소드\n  const onToggleOfImportant = useCallback(\n    (listId) => {\n      // 새로운 일정 객체를 만든 후 state에 구현(원본불변)\n      setTodos((todos) =>\n        todos.map((todo) =>\n          todo.listId === listId\n            ? { ...todo, important: !todo.important }\n            : todo\n        )\n      );\n      // 서버에 POST\n      axios.post(\"http://localhost:8000/mypage\", {\n        important: todo.important,\n      });\n    },\n    [todos]\n  );\n\n  // 6. 완료 클릭 메소드\n  const onToggleOfComplete = useCallback(\n    (listId) => {\n      // 클릭된 일정의 listId의 important 값을 반대 boolean 값으로 변경하여 state에 구현\n      setTodos(\n        todos.map((todo) =>\n          todo.listId === listId ? { ...todo, complete: !todo.complete } : todo\n        )\n      );\n      // 서버에 POST\n      axios.post(\"http://localhost:8000/mypage\", {\n        complete: todo.complete,\n      });\n    },\n    [todos]\n  );\n\n  // A$AP funckin' added on\n  useEffect(() => {\n    getTodos(todos);\n  }, [todos]);\n\n  // 7. 컴포넌트 렌더링\n  return (\n    <>\n      {/* 일정입력 컴포넌트 */}\n      <div className=\"input-field\">\n        <NewToDo onInsert={onInsert} />\n      </div>\n      {/* 일정목록 컴포넌트 */}\n      <section className=\"container-list\">\n        <div className=\"todo\">\n          <List\n            todos={todos}\n            onRemove={onRemove}\n            onToggleOfImportant={onToggleOfImportant}\n            onToggleOfComplete={onToggleOfComplete}\n          />\n        </div>\n      </section>\n    </>\n  );\n};\n// 컴포넌트의 props가 바뀌지 않았다면 re-rendering 방지(= shouldComponentUpdate와 동일)\nexport default React.memo(ToDo);\n","import React from \"react\";\nimport { MdStar, MdStarBorder } from \"react-icons/md\";\nimport cn from \"classnames\";\nimport \"./ListCompleteFiltered.scss\";\n\nconst ListCompleteFiltered = ({ todo }) => {\n  const { listId, important, content, complete } = todo;\n  return (\n    <div className=\"list-complete-item\">\n      {/* 중요버튼 */}\n      <div className={cn(\"important-check-ofComplete\", { important })}>\n        {important ? <MdStar /> : <MdStarBorder />}\n        <div className=\"content\">{content}</div>\n      </div>\n    </div>\n  );\n};\n// 컴포넌트의 props가 바뀌지 않았다면 re-rendering 방지(= shouldComponentUpdate와 동일)\nexport default React.memo(ListCompleteFiltered);\n","import React from \"react\";\n\n// components\nimport ListCompleteFiltered from \"../components/ListCompleteFiltered\";\n\nconst Completed = (props) => {\n  const filtered = props.todos.filter((todo) => todo.complete === true);\n\n  return (\n    <>\n      <section className=\"container-list\">\n        <div className=\"title-complete\">&#9989; 완료일정</div>\n        <div className=\"todo\">\n          {filtered.map((todo) => (\n            <ListCompleteFiltered key={todo.listId} todo={todo} />\n          ))}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default React.memo(Completed);\n","import React from \"react\";\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from \"react-icons/md\";\nimport cn from \"classnames\";\nimport \"./ListImportantFiltered.scss\";\n\nconst ListImportantFiltered = ({ todo }) => {\n  const { listId, important, content, complete } = todo;\n  return (\n    <div className=\"list-important-item\">\n      {/* 완료버튼 */}\n      <div className={cn(\"complete-check-ofImportant\", { complete })}>\n        {complete ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n        <div className=\"content\">{content}</div>\n      </div>\n    </div>\n  );\n};\n// 컴포넌트의 props가 바뀌지 않았다면 re-rendering 방지(= shouldComponentUpdate와 동일)\nexport default React.memo(ListImportantFiltered);\n","import React from \"react\";\n\n// components\nimport ListImportantFiltered from \"../components/ListImportantFiltered\";\n\nconst Important = (props) => {\n  const filtered = props.todos.filter((todo) => todo.important === true);\n\n  return (\n    <>\n      <section className=\"container-list\">\n        <div className=\"title-important\">&#9989; 중요일정</div>\n        <div className=\"todo\">\n          {filtered.map((todo) => (\n            <ListImportantFiltered key={todo.listId} todo={todo} />\n          ))}\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default React.memo(Important);\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport axios from \"axios\";\n\n// Components\nimport Nav from \"./components/Nav\";\nimport Welcome from \"./components/Welcome\";\nimport SignInModal from \"./components/SignIn\";\nimport SignUpModal from \"./components/SignUp\";\nimport FindAccount from \"./components/Find_account\";\nimport CompletedFindEmail from \"./components/Find_Email_completed\";\nimport CompletedFindPw from \"./components/Find_PW_completed\";\nimport Edit from \"./components/Edit\";\nimport Remove from \"./components/Remove\";\nimport RemoveUserCompleted from \"./components/Remove_completed\"\nimport Footer from \"./components/Footer\";\n\n// Routes\nimport MyPage from \"./routes/MyPage\";\nimport ToDo from \"./routes/ToDo\";\nimport Completed from \"./routes/Completed\";\nimport Important from \"./routes/Important\";\n\n// CSS\nimport \"./App.css\";\n\n//fakedata\nimport user from \"./test_data_user.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogin: false,\n      email: null,\n      password: null,\n      userName: null,\n      mobile: null,\n      todos: [], // A$AP funckin' added on\n    };\n  }\n\n  //! 인증 성공. 사용자 정보를 호출하고, 이에 성공하면 로그인 상태를 바꾸기.\n  // handleResponseSuccess() {   // ! 추후 알맞게 수정할 것\n  //   axios.get('http://localhost:8000')\n  //     .then(res => {\n  //       console.log(res)\n  //       this.setState({\n  //         isLogin: false,\n  //         email: res.data.email,\n  //         password: res.data.password,\n  //         userName: res.data.userName,\n  //         mobile: res.data.mobile\n  //       })\n  //     })\n  // }\n\n  // fakedata로 우선 구현\n  // 로그인 성공시 해당 유저로 상태변경\n  handleResponseSuccess = () => {\n    // ! 추후 알맞게 수정할 것\n    /// 로그인 성공하면 ToDo 컴포넌트로 해당 유저의 정보가 props로 전달이 됨\n    this.setState({\n      isLogin: true,\n      email: user[0].email,\n      password: user[0].password,\n      userName: user[0].name,\n      mobile: user[0].mobile,\n    });\n\n    // this.props.history.push(\"/\")\n  };\n\n  //로그아웃\n  // 서버연동시 아래 코드 주석 해제하기\n  handleSignOut = () => {\n    // axios.post(\"https://localhost:8000/signout\")\n    //   .then(() => {\n    this.setState({\n      isLogin: false,\n      email: null,\n      password: null,\n      userName: null,\n      mobile: null,\n    });\n    // })\n    this.doSignOut();\n  };\n\n  // Edit 컴포넌트의 결과를 끌어올린다.\n  adoptModifiedInfo = (data) => {\n    if (data.email !== \"\") this.setState({ email: data.email });\n    if (data.password !== \"\") this.setState({ password: data.password });\n    if (data.userName !== \"\") this.setState({ userName: data.userName });\n    if (data.mobile !== \"\") this.setState({ mobile: data.mobile });\n  };\n\n  // A$AP funckin' added on\n  getTodos = (data) => {\n    this.setState({ todos: data });\n  };\n\n  // 변경된 유저정보 상태를 유지시켜 로그인 상태 혹은 로그아웃 상태를 유지시킨다.\n  componentDidMount() {\n    const userEmail = window.sessionStorage.getItem(\"email\");\n    if (userEmail) {\n      this.handleResponseSuccess();\n      this.getTodos;\n    } else {\n      this.handleSignOut();\n    }\n  }\n\n  doSignOut = () => {\n    window.sessionStorage.clear();\n  };\n\n  render() {\n    console.log(\"세션스토리지\", window.sessionStorage);\n    console.log(\"App스테이트\", this.state);\n    const { isLogin, email, userName, password, mobile, todos } = this.state;\n    // console.log(isLogin)\n    return (\n      <HashRouter>\n        <div className=\"menu\">\n          {/* 1. 로그인 성공시 해당 유저의 이름을 메뉴바 상단에 \"***님 환영합니다.\" 라고 표시하기 위해 welcome 컴포넌트까지 건네줄 것\n              2. 로그아웃기능을 위해 하위 컴포넌트인 Nav로, 그리고 다시 SignOut 컴포넌트로 내릴 것. */}\n          <Nav resetLogin={this.handleSignOut} loginUserInfo={this.state} />\n        </div>\n        <div className=\"screen\">\n          <Route\n            path={\"/\"}\n            exact={true}\n            render={() =>\n              isLogin ? ( // 새로고침해도 로그인 상태를 유지시키기 위해 localstorage에 저장된 정보를 사용한다. local storage는 사용자가 지우지 않는 이상 영구적으로 계속 브라우저에 남아있음 (단, session storage는 브라우저가 닫은 겨우 사라지고, 브라우저 내에서 탬을 생성하는 경우에도 별도의 영역으로 할당됨.)\n                <ToDo\n                  email={email}\n                  userName={userName}\n                  todos={todos} // A$AP funckin' added on\n                  getTodos={this.getTodos} // A$AP funckin' added on\n                />\n              ) : (\n                <SignInModal\n                  handleResponseSuccess={this.handleResponseSuccess}\n                />\n              )\n            }\n          />\n          <Route path={\"/todo\"} component={ToDo} />\n          <Route\n            path={\"/mypage\"}\n            render={() =>\n              isLogin ? (\n                <MyPage\n                  userName={userName}\n                  email={email}\n                  password={password}\n                  mobile={mobile}\n                  adoptModifiedInfo={this.adoptModifiedInfo}\n                  signOut={this.handleSignOut}\n                />\n              ) : (\n                <MyPage />\n              )\n            }\n          />\n          <Route\n            path={\"/completed\"}\n            render={() =>\n              isLogin ? (\n                <Completed email={email} todos={todos} /> // A$AP funckin' added on\n              ) : (\n                <Completed />\n              )\n            }\n          />\n          <Route\n            path={\"/important\"}\n            render={() =>\n              isLogin ? (\n                <Important email={email} todos={todos} /> // A$AP funckin' added on\n              ) : (\n                <Important />\n              )\n            }\n          />\n          <Route path={\"/signup\"} component={SignUpModal} />\n          <Route path={\"/findaccount\"} component={FindAccount} />\n          <Route path={\"/useremail\"} component={CompletedFindEmail} />\n          <Route path={\"/userpw\"} component={CompletedFindPw} />\n          <Route path={\"/edit\"} component={Edit} />\n          <Route path={\"/remove\"} component={Remove} />\n          <Route path={\"/remove_user_completed\"} component={RemoveUserCompleted} />\n        </div>\n        <div className=\"footer\">\n          <Footer />\n        </div>\n      </HashRouter>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}